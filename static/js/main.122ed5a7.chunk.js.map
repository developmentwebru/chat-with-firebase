{"version":3,"sources":["utils/consts.js","components/Navbar.js","components/Loader.js","components/Chat.js","routes.js","components/Login.js","components/AppRouter.js","App.js","index.js"],"names":["LOGIN_ROUTE","CHAT_ROUTE","Navbar","auth","useContext","Context","useAuthState","user","AppBar","position","Toolbar","variant","Grid","container","justify","Button","onClick","signOut","to","Loader","Container","style","height","window","innerHeight","alignItems","direction","className","Chat","firestore","useState","value","setValue","useCollectionData","collection","orderBy","messages","loading","sendMessage","a","add","uid","displayName","photoURL","text","createdAt","firebase","FieldValue","serverTimestamp","marginTop","map","message","Avatar","src","width","TextField","fullWidth","rowsMax","onChange","e","target","publicRoutes","path","Component","login","provider","GoogleAuthProvider","signInWithPopup","background","Box","p","privateRoutes","AppRouter","component","exact","App","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","createContext","ReactDOM","render","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.122ed5a7.chunk.js","sourcesContent":["export const LOGIN_ROUTE = '/login'\r\nexport const CHAT_ROUTE = '/chat'","import React from 'react'\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Button from '@material-ui/core/Button';\r\nimport { NavLink } from 'react-router-dom';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { LOGIN_ROUTE } from '../utils/consts';\r\nimport { useAuthState } from 'react-firebase-hooks/auth'\r\nimport { useContext } from 'react'\r\nimport { Context } from '../index'\r\n\r\nfunction Navbar() {\r\n    //здесь данные нужны для отображения кнопки Логин или Выйти, поэтому таже их получаем через useContext \r\n    const { auth } = useContext(Context)\r\n    const [user] = useAuthState(auth) //хук из модуля react-firebase-hooks\r\n\r\n    return (\r\n        <AppBar position=\"static\">\r\n            <Toolbar variant=\"dense\">\r\n                <Grid container justify={'flex-end'}>\r\n                    {user ?\r\n                        <Button\r\n                            variant={'outlined'}\r\n                            onClick={() => auth.signOut()}\r\n                        >\r\n                            Выйти\r\n                        </Button>\r\n                        :\r\n                        <NavLink to={LOGIN_ROUTE}>\r\n                            <Button variant={'outlined'}>\r\n                                Логин\r\n                            </Button>\r\n                        </NavLink>\r\n\r\n                    }\r\n\r\n\r\n                </Grid>\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import React from 'react'\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Container from '@material-ui/core/Container';\r\nfunction Loader() {// обычный лоадер\r\n    return (\r\n        <Container>\r\n            <Grid\r\n                container\r\n                style={{ height: window.innerHeight - 50 }}\r\n                alignItems={'center'}\r\n                justify={'center'}\r\n            >\r\n                <Grid\r\n                    container\r\n                    alignItems={'center'}\r\n                    direction={'column'}\r\n                >\r\n                    <div className=\"lds-dual-ring\"></div>\r\n                </Grid>\r\n            </Grid>\r\n        </Container >\r\n    )\r\n}\r\n\r\nexport default Loader\r\n","import React from 'react'\r\nimport { useAuthState } from 'react-firebase-hooks/auth'\r\nimport { useContext, useState } from 'react'\r\nimport { Context } from '../index'\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport { useCollectionData } from 'react-firebase-hooks/firestore'\r\nimport Loader from './Loader'\r\nimport firebase from 'firebase';\r\n\r\nfunction Chat() {\r\n    const { auth, firestore } = useContext(Context) //хук реакта для передачи данных от родителя\r\n    const [user] = useAuthState(auth) //хук из модуля react-firebase-hooks\r\n    const [value, setValue] = useState('') //сделаем Input управляемый\r\n    const [messages, loading] = useCollectionData(  //хук из модуля react-firebase-hooks он возвращает картеж 1 сообщение 2 лоадинг, делаем сразуже сортировку сообщений по дате с помощью orderBy\r\n        firestore.collection('messages').orderBy('createdAt')\r\n    )\r\n    const sendMessage = async () => {\r\n        firestore.collection('messages').add({\r\n            uid: user.uid,\r\n            displayName: user.displayName,\r\n            photoURL: user.photoURL,\r\n            text: value,\r\n            createdAt: firebase.firestore.FieldValue.serverTimestamp()\r\n        })\r\n        setValue('')\r\n    } //сохраняем сообщения в базу передаем объект с любыми произвольными параметрами: id пользователя, имя, ссылку на аватарку, также сообщение с датой отправкой сообщения. После того как передали сообщение чистим инпут через SetValue передавая туда пустую строку.\r\n\r\n    if (loading) {\r\n        return <Loader />\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Grid\r\n                container\r\n                style={{ height: window.innerHeight - 55, marginTop: '5px' }} //фиксируем высоту видимой области, чтобы не было скролла, и делаем отступ от navbar\r\n                justify={'center'}>\r\n                <div className='chat'>\r\n\r\n                    {messages.map(message =>// отрисовывем все сообщения с firebase\r\n                        <div key={message.createdAt}\r\n                            className={user.uid === message.uid ? 'messages' : 'messages-unknown'}// ЗДЕСЬ и в следующих тернарных выражениях делаем различие между своими и чужими сообщениями\r\n                        >\r\n                            <Grid container>\r\n                                <div className={user.uid === message.uid ? 'bubble' : 'bubble-unknown'}>\r\n                                    <div className={user.uid === message.uid ? 'displayName' : 'displayName-unknown'}>\r\n                                        {message.displayName // выводим имя\r\n                                        }\r\n                                    </div>\r\n                                    <div className={user.uid === message.uid ? 'message' : 'message-unknown'}>\r\n                                        {message.text //выводим текст сообщения\r\n                                        }\r\n                                    </div>\r\n                                </div>\r\n                                <div className={user.uid === message.uid ? 'avatar' : 'avatar-unknown'}>\r\n                                    <Avatar src={message.photoURL //выводим аватра с Google\r\n                                    } />\r\n                                </div>\r\n                            </Grid>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n                <Grid\r\n                    container\r\n                    direction={'column'}\r\n                    alignItems={'flex-end'}\r\n                    style={{ width: '80%' }}\r\n                >\r\n                    <TextField // инпут для ввода сообщений\r\n                        fullWidth\r\n                        rowsMax={2}\r\n                        variant={'outlined'}\r\n                        value={value}\r\n                        onChange={e => setValue(e.target.value) // посредсвом синтетической обертки предоставляемой реактом делаем контролируемый инпут связывае его со state через setState\r\n                        }\r\n                    />\r\n                    <Button\r\n                        onClick={sendMessage // acсинхронная функция для отправки сообщений на сервер\r\n                        }\r\n                        variant={'outlined'}\r\n                    >\r\n                        Отправить\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n\r\n        </Container >\r\n    )\r\n}\r\n\r\nexport default Chat\r\n","import Chat from \"./components/Chat\";\r\nimport Login from \"./components/Login\";\r\nimport { CHAT_ROUTE, LOGIN_ROUTE } from \"./utils/consts\";\r\n\r\nexport const publicRoutes = [\r\n    {\r\n        path: LOGIN_ROUTE,\r\n        Component: Login\r\n    }\r\n]\r\n\r\nexport const privateRoutes = [\r\n    {\r\n        path: CHAT_ROUTE,\r\n        Component: Chat\r\n    }\r\n]","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button';\r\nimport Container from '@material-ui/core/Container';\r\nimport { Context } from '../index'\r\nimport { useContext } from 'react';\r\nimport firebase from 'firebase/app';\r\n\r\nconst Login = () => {\r\n    const { auth } = useContext(Context)          //получим объект для авторизации через хук useContext, через деструктуризацию потомучто остальное нам здесь на понадобится\r\n\r\n    //создадим функцию которая будет вызываться при нажатии на кнопку\r\n    const login = async () => {\r\n        const provider = new firebase.auth.GoogleAuthProvider() //это у нас конструктор мы тут должны создать новый объект\r\n        const { user } = await auth.signInWithPopup(provider)\r\n                                                         //получим пользователя после того как мы авторизовались\r\n    }\r\n\r\n\r\n    return (\r\n        <Container>\r\n            <Grid\r\n                container\r\n                style={{ height: window.innerHeight - 50 }}\r\n                alignItems={'center'}\r\n                justify={'center'}\r\n            >\r\n                <Grid\r\n                    style={{ width: 400, background: 'lightgray' }}\r\n                    container\r\n                    alignItems={'center'}\r\n                    direction={'column'}\r\n                >\r\n                    <Box p={5}>\r\n                        <Button onClick={login} variant={'outlined'} >Войти с помощью Google</Button>\r\n                    </Box>\r\n                </Grid>\r\n            </Grid>\r\n        </Container >\r\n    )\r\n}\r\n\r\nexport default Login;\r\n","import React from 'react'\r\nimport { Route, Switch, Redirect } from 'react-router-dom'\r\nimport { privateRoutes, publicRoutes } from '../routes'\r\nimport { CHAT_ROUTE, LOGIN_ROUTE } from '../utils/consts'\r\nimport { useAuthState } from 'react-firebase-hooks/auth'\r\nimport { useContext } from 'react'\r\nimport { Context } from '../index'\r\n\r\nconst AppRouter = () => {\r\n    //роутинг страницы чата или логина пользуемся созданием переменных, чтобы избежать ошибок, которые здесь импортируем.\r\n    const { auth } = useContext(Context)\r\n    const [user] = useAuthState(auth) //хук из модуля react-firebase-hooks\r\n\r\n    return user ?\r\n        (\r\n            <Switch>\r\n                {privateRoutes.map(({ path, Component }) =>\r\n                    <Route key={path} path={path} component={Component} exact={true} />\r\n                )}\r\n                <Redirect to={CHAT_ROUTE} />\r\n            </Switch>\r\n        )\r\n        :\r\n        (\r\n            <Switch>\r\n                {publicRoutes.map(({ path, Component }) =>\r\n                    <Route key={path} path={path} component={Component} exact={true} />\r\n                )}\r\n                <Redirect to={LOGIN_ROUTE} />\r\n            </Switch>\r\n        )\r\n}\r\n\r\nexport default AppRouter\r\n","import './App.css';\nimport { BrowserRouter as Router, } from 'react-router-dom';\nimport Navbar from './components/Navbar';\nimport AppRouter from './components/AppRouter';\nimport Loader from './components/Loader';\nimport { useAuthState } from 'react-firebase-hooks/auth'\nimport { useContext } from 'react'\nimport { Context } from './index'\n\nfunction App() {\n  const { auth } = useContext(Context)\n  const [user, loading] = useAuthState(auth) //хук из модуля react-firebase-hooks \n\n  if (loading) { // показываем лоадер \n    return <Loader />\n  }\n\n  return (\n    <div className=\"App\">\n      <Router>  \n        <Navbar />\n        <AppRouter />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport firebase from 'firebase/app';\nimport 'firebase/firestore'\nimport 'firebase/auth'\nimport { createContext } from 'react';\n\n\n// Initialize Firebase\nfirebase.initializeApp({\n  apiKey: \"AIzaSyDc61mg9t1VJ-FQakgGP0YgObkTislxGVM\",\n  authDomain: \"chat-react-7afa5.firebaseapp.com\",\n  projectId: \"chat-react-7afa5\",\n  storageBucket: \"chat-react-7afa5.appspot.com\",\n  messagingSenderId: \"97579506131\",\n  appId: \"1:97579506131:web:dc2061c19821af5a7db726\",\n  measurementId: \"G-VQF5WTD8QT\"\n});\n\n//чтобы не перекидывать через пропсы создадим контекст\nexport const Context = createContext(null)\n\nconst auth = firebase.auth() //объект с помощью которого мы авторизуемся\nconst firestore = firebase.firestore()\n\nReactDOM.render(\n  // обернем все наше приложение в контекст провайдер, для того чтобы прокинуть  все внутрь и затем чтобы этим пользоваться внутри.\n  <Context.Provider value={{\n    firebase,\n    auth,\n    firestore\n  }}>\n    <App />\n  </Context.Provider>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}